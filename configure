#!/bin/sh
###############################################################################
#
#  Copyright (C) 2003-2008  Anders Gavare.  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#  3. The name of the author may not be used to endorse or promote products
#     derived from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
#  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
#  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
#  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
#  SUCH DAMAGE.
#
#
#  This is a minimal configure script, hardcoded for GXemul. This script
#  figures out which compiler flags will work, and creates Makefiles in
#  sub-directories. A config.h file is also created.
#
#
#  --->   FOR NORMAL USE, JUST RUN ./configure WITHOUT OPTIONS!
#
#
#  To compile the emulator with profiling (during development), use
#  CFLAGS="-pg", run the emulator, and then run 'gprof gxemul' and study
#  the results.
#
#
#  The main things that are detected by this script:
#
#    o)  special hacks for some OSes
#    o)  which compiler(s) to use  (overridden by setting CC)
#    o)  which compiler flags to use  (overridden by setting CFLAGS)
#    o)  X11 flags and libraries  (TODO: should be possible to override
#	 via command line options?)
#
#  The general philosophy regarding command line switches is that anything
#  which can be incorporated into the program as a runtime command line option
#  should be, instead of requiring a recompile.
#
###############################################################################

# Default prefix for "make install"
DEFAULTPREFIX=/usr/local

#  Figure out if this is a stable version (0.x.x).
X=`basename \`pwd\`|cut -d \- -f 2-|cut -c1-2`
if [ z"$X" = z0. ]; then
	#  Stable.
	WITHOUTUNITTESTS=YES
else
	#  Development.
	UNSTABLE=YES
	WITHOUTUNITTESTS=NO
fi

if [ z"$*" != z ]; then
	#  Parse command line options:
	for a in $*; do
		if [ z$a = z--debug ]; then
			DEBUG=YES
		else if [ z$a = z--without-native-codegen ]; then
			DISABLENATIVECODE=YES
		else if [ z$a = z--with-gtkmm ]; then
			WITHGTKMM=YES
		else if [ z$a = z--without-gtkmm ]; then
			WITHOUTGTKMM=YES
		else if [ z$a = z--with-x11 ]; then
			WITHX11=YES
		else if [ z$a = z--without-x11 ]; then
			WITHOUTX11=YES
		else if [ z$a = z--with-unit-tests ]; then
			WITHOUTUNITTESTS=NO
		else if [ z$a = z--without-unit-tests ]; then
			WITHOUTUNITTESTS=YES
		else if [ z$a = z--help ]; then
			printf "usage: $0 [options]\n\n"
			if [ z"$UNSTABLE" = zYES ]; then
				echo "  --debug                    configure" \
					"for a debug build"
				echo "  --without-unit-tests       build without" \
					"unit tests"
			else
				echo "  --with-unit-tests          build with" \
					"unit tests (increases binary size)"
			fi
			echo
			echo "  --with-gtkmm               build with the gtkmm GUI"
			echo "  --without-gtkmm            build without the gtkmm GUI"
			echo "  --with-x11                 build with X11 framebuffer support"
			echo "  --without-x11              build without X11 framebuffer support"
			echo
			echo "(default is to detect gtkmm and X11 automatically)"
			echo
			if [ z"$UNSTABLE" = zYES ]; then
				echo "  --without-native-codegen   build without support for native code generation,"
				echo "                             even if such code is supported for this host"
				echo
			fi
			echo "If the PREFIX environment variable is set," \
			    "it will override the default"
			echo "value, which is: $DEFAULTPREFIX"
			echo
			exit
		else
			echo "Invalid option: $a"
			echo "Run  $0 --help  to get a list of" \
			    "available options."
			exit
		fi; fi; fi; fi; fi; fi; fi; fi; fi
	done
fi


###############################################################################
#
#  Configure options:
#
#  This creates a config.h file, which is then included from include/misc.h.
#
###############################################################################

#  Head of config.h:
printf "/*
 *  THIS FILE IS AUTOMATICALLY CREATED BY configure!
 *  DON'T EDIT THIS FILE MANUALLY, IT WILL BE OVERWRITTEN.
 */
\n#ifndef CONFIG_H\n#define CONFIG_H\n\n" > config.h


#  Figure out if VERSION should be defined.
X=`basename \`pwd\`|cut -d \- -f 2-`
if [ z"$X" = zgxemul ]; then
	printf "#define VERSION \"(unknown version)\"\n" >> config.h
else
	printf "#define VERSION \"$X\"\n" >> config.h
fi


if [ z"$UNSTABLE" = zYES ]; then
	printf "#define UNSTABLE_DEVEL\n" >> config.h
fi

if [ z"$WITHOUTUNITTESTS" = zYES ]; then
	printf "#define WITHOUTUNITTESTS\n" >> config.h
fi

if [ z"$DEBUG" = zYES ]; then
	CFLAGS="-D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC $CFLAGS"
else
	CFLAGS="-DNDEBUG $CFLAGS"
fi


###############################################################################
#
#  Special hacks for some host OSes:
#
###############################################################################

if [ z"`uname|cut -c 1-6`" = zCYGWIN ]; then
	CYGWIN=YES

	if [ z"$CC" = z ]; then
		#  Assume gcc on Cygwin (Windows) systems.
		CC=gcc
	fi
fi

if [ z"`uname`" = zHP-UX ]; then
	HPUX=YES

	if [ z"$CC" = z ]; then
		if [ -f /usr/local/pa64/bin/gcc ]; then
			CC=/usr/local/pa64/bin/gcc
		fi
	fi
fi

if [ z"`uname`" = zOSF1 ]; then
	OSF1=YES
fi


###############################################################################
#
#  Create the Makefile header:
#
###############################################################################

rm -f _Makefile.header

printf "#
#  DO NOT EDIT THIS FILE! It is automagically created by
#  the configure script, based on Makefile.skel.
#\n\n" >> _Makefile.header


#  Try with the simplest possible test program. Actually, test static variables
#  as well, because GXemul uses things like NULL-initialized global pointers,
#  and it is important that they work. (GCC on Solaris is known to be completely
#  broken, for instance.)

echo '#include <stdio.h>

int main(int argc, char *argv[])
{
        static int x = 0;
        static int y = 1;
        printf("%i,%i", x, y);
        return 0;
}
' > _testprog.c
cp -f _testprog.c _testprog.cc


#  Try to detect which C compiler to use, if CC is not set:
printf "checking which C compiler to use... "
rm -f _testprog
if [ z"$CC" = z ]; then
	#  Try gcc first:
	printf "#!/bin/sh\ngcc $CFLAGS _testprog.c -o _testprog >" > _test.sh
	printf " /dev/null 2> /dev/null\n" >> _test.sh
	chmod 755 _test.sh
	./_test.sh > /dev/null 2> /dev/null
	if [ -x _testprog ]; then
		if [ z`./_testprog` = z0,1 ]; then
			CC=gcc
		else
			printf "broken gcc detected\n"
			printf "The test program:\n\n"
			cat _testprog.c
			printf "\nshould have resulted in 0,1, but the"
			printf " result was: "
			./_testprog
			printf "\n\nchecking for other C compilers... "
		fi
	fi
	rm -f _testprog

	#  If both gcc and cc exist, then cc might be a vendor specific
	#  compiler which produces faster code than gcc (eg on Solaris):
	printf "#!/bin/sh\ncc $CFLAGS _testprog.c -o _testprog >" > _test.sh
	printf " /dev/null 2> /dev/null\n" >> _test.sh
	chmod 755 _test.sh
	./_test.sh > /dev/null 2> /dev/null
	if [ -x _testprog ]; then
		if [ z`./_testprog` = z0,1 ]; then
			CC=cc
		else
			printf "broken cc detected\n"
			printf "checking for other C compilers... "
		fi
	fi
	rm -f _testprog

#  Actually, don't try ccc on Alpha. ccc generates broken code :(

#	#  Try ccc (FreeBSD/Alpha):
#	printf "#!/bin/sh\nccc $CFLAGS _testprog.c -o _testprog >" > _test.sh
#	printf " /dev/null 2> /dev/null\n" >> _test.sh
#	chmod 755 _test.sh
#	./_test.sh > /dev/null 2> /dev/null
#	if [ -x _testprog ]; then
#		CC="ccc"
#	fi
#	rm -f _testprog

	rm -f _test.sh
fi

rm -f _testprog

if [ z"$CC" = z ]; then
	printf "no working compiler detected\n"
	printf "\nPlease set the CC environment variable to a working C "
	printf "compiler before running\nthe configure script, and make"
	printf " sure that the CFLAGS environment variable is\nalso valid"
	printf " for that compiler.\n"
	exit
fi

printf "$CC"
#printf " $CFLAGS"

CCTYPE="generic"

if $CC $CFLAGS -V 2> /dev/null | grep ompaq 1> /dev/null 2> /dev/null; then
	COMPAQCC=YES
	CCTYPE="Compaq CC"
fi

if $CC $CFLAGS -V 2>&1 | grep Sun 1> /dev/null 2> /dev/null; then
	SUNCC=YES
	CCTYPE="Solaris CC"
fi

if $CC $CFLAGS -v 2>&1 | grep gcc 1> /dev/null 2> /dev/null; then
	GCCCC=YES
	CCTYPE="GNU CC"
fi

if [ z"$CYGWIN" = zYES ]; then
	CCTYPE="$CCTYPE (Cygwin)"
fi

echo " ($CCTYPE)"


#  Try to detect which C++ compiler to use, if CXX is not set:
printf "checking which C++ compiler to use... "
rm -f _testprog
if [ z"$CXX" = z ]; then
	#  Try g++ first:
	printf "#!/bin/sh\ng++ $CFLAGS _testprog.c -o _testprog >" > _test.sh
	printf " /dev/null 2> /dev/null\n" >> _test.sh
	chmod 755 _test.sh
	./_test.sh > /dev/null 2> /dev/null
	if [ -x _testprog ]; then
		if [ z`./_testprog` = z0,1 ]; then
			CXX=g++
		fi
	fi
	rm -f _testprog

	#  If both g++ and c++ exist, then c++ might be a vendor specific
	#  compiler which produces faster code than g++.
	printf "#!/bin/sh\nc++ $CFLAGS _testprog.c -o _testprog >" > _test.sh
	printf " /dev/null 2> /dev/null\n" >> _test.sh
	chmod 755 _test.sh
	./_test.sh > /dev/null 2> /dev/null
	if [ -x _testprog ]; then
		if [ z`./_testprog` = z0,1 ]; then
			CXX=c++
		else
			printf "broken c++ detected\n"
			printf "checking for other C++ compilers... "
		fi
	fi
	rm -f _testprog

	rm -f _test.sh
fi

rm -f _testprog

if [ z"$CXX" = z ]; then
	printf "no working C++ compiler detected\n"
	printf "\nPlease set the CXX environment variable to a working C++ "
	printf "compiler before running\nthe configure script, and make"
	printf " sure that the CFLAGS environment variable is\nalso valid"
	printf " for that compiler.\n"
	exit
fi

printf "$CXX"
#printf " $CFLAGS"
echo ""


printf "checking for X11 headers and libs\n"

#  Try to compile a small X11 test program:
printf "#include <X11/Xlib.h>
#include <stdio.h>
Display *dis;
void f(void) {
	dis = XOpenDisplay(NULL);
}
int main(int argc, char *argv[])
{ return 0; }
" > _test_x11.c

XOK=0

XINCLUDE=-I/usr/X11R6/include
$CC $CFLAGS _test_x11.c -c -o _test_x11.o $XINCLUDE 2> /dev/null

XLIB="-L/usr/X11R6/lib -lX11"
$CC $CFLAGS _test_x11.o -o _test_x11 $XLIB 2> /dev/null

if [ -x _test_x11 ]; then
	XOK=1
fi

rm -f _test_x11 _test_x11.o

if [ z$XOK = z0 ]; then
	XINCLUDE=-I/usr/local/include
	$CC $CFLAGS _test_x11.c -c -o _test_x11.o \
	    $XINCLUDE 2> /dev/null

	XLIB="-L/usr/local/lib -lX11"
	$CC $CFLAGS _test_x11.o -o _test_x11 $XLIB 2> /dev/null

	if [ -x _test_x11 ]; then
		XOK=1
	fi
fi
rm -f _test_x11 _test_x11.o

#  Special case for some 64-bit Linux/x86_64 systems:
if [ z$XOK = z0 ]; then
	$CC $CFLAGS _test_x11.c -c -o _test_x11.o \
	    $XINCLUDE 2> /dev/null
	XLIB="-L/usr/X11R6/lib64 -lX11"
	$CC $CFLAGS _test_x11.o -o _test_x11 $XLIB 2> /dev/null

	if [ -x _test_x11 ]; then
		XOK=1
	fi
fi
rm -f _test_x11 _test_x11.o

if [ z$XOK = z0 ]; then
	XINCLUDE=""
	$CC $CFLAGS _test_x11.c -c -o _test_x11.o \
	    $XINCLUDE 2> /dev/null

	#  -lsocket for Solaris
	XLIB="-lX11 -lsocket"
	$CC $CFLAGS _test_x11.o -o _test_x11 $XLIB 2> /dev/null
	if [ -x _test_x11 ]; then
		XOK=1
	fi
	rm -f _test_x11 _test_x11.o
fi

if [ z`uname` = zNetBSD ]; then
	echo "Using NetBSD hack for X11 libs..."
	XLIB="$XLIB -Wl,-rpath,/usr/X11R6/lib"
fi

if [ z`uname` = zOpenBSD ]; then
	if [ z`uname -m` = zarc ]; then
		echo "Using old OpenBSD/arc hack for X11 libs..."
		XLIB="$XLIB -Wl,-rpath,/usr/X11R6/lib"
	fi
fi

if [ z$XOK = z0 ]; then
	echo "Failed to compile X11 test program."
	if [ z$WITHX11 = zYES ]; then
		echo "X11 framebuffer support was requested (--with-x11)."
		echo "Aborting."
		exit
	fi
	echo "GXemul will be compiled without X11 framebuffer support."
else
	if [ z$WITHOUTX11 = zYES ]; then
		printf "X11 libraries and headers detected, but --without-x11"
		echo " was specified..."
	else
		printf "X11 headers: $XINCLUDE\n"
		printf "X11 libraries: $XLIB\n"
		echo "XINCLUDE=$XINCLUDE" >> _Makefile.header
		echo "XLIB=$XLIB" >> _Makefile.header
		printf "#define WITH_X11\n" >> config.h
	fi
fi

rm -f _test_x11.c


if [ z$HPUX = zYES ]; then
	CFLAGS="-D_XOPEN_SOURCE_EXTENDED $CFLAGS"
	printf "#define HPUX\n" >> config.h
fi


if [ z$OSF1 = zYES ]; then
	CFLAGS="-D_XOPEN_SOURCE=500 -D_OSF_SOURCE -D_POSIX_PII_SOCKET $CFLAGS"
fi


#  Check for 'alpha' define.
printf "checking for 'alpha' define... "
printf "#include <stdio.h>\nint main(int argc, char *argv[]){
#ifdef alpha
printf(\"1\");
#undef alpha
#ifdef alpha
printf(\"2\");
#endif
#endif
printf(\"\\\n\");return 0;}\n" > _testm.c
$CC $CFLAGS _testm.c -o _testm 2> /dev/null
if [ ! -x _testm ]; then
	printf "\nWARNING! COULD NOT COMPILE alpha define TEST"
	printf " PROGRAM AT ALL!\n"
else
	if [ z`./_testm` = z1 ]; then
		printf "yes, workaround applied\n"
		echo "#undef alpha" >> config.h
	else
		if [ z`./_testm` = z12 ]; then
			printf "yes, but workaround not possible\n"
			exit
		else
			printf "no\n"
		fi
	fi
fi
rm -f _testm*


#  Some OSes on MIPS seems to define 'mips' to 1. (eg OpenBSD/arc)
printf "checking for 'mips' define... "
printf "#include <stdio.h>\nint main(int argc, char *argv[]){
#ifdef mips
printf(\"1\");
#undef mips
#ifdef mips
printf(\"2\");
#endif
#endif
printf(\"\\\n\");return 0;}\n" > _testm.c
$CC $CFLAGS _testm.c -o _testm 2> /dev/null
if [ ! -x _testm ]; then
	printf "\nWARNING! COULD NOT COMPILE mips define TEST"
	printf " PROGRAM AT ALL!\n"
else
	if [ z`./_testm` = z1 ]; then
		printf "yes, workaround applied\n"
		echo "#undef mips" >> config.h
	else
		if [ z`./_testm` = z12 ]; then
			printf "yes, but workaround not possible\n"
			exit
		else
			printf "no\n"
		fi
	fi
fi
rm -f _testm*


#  Similar to the mips define check above, although I don't know if
#  any OS actually defined ppc like this.
printf "checking for 'ppc' define... "
printf "#include <stdio.h>\nint main(int argc, char *argv[]){
#ifdef ppc
printf(\"1\");
#undef ppc
#ifdef ppc
printf(\"2\");
#endif
#endif
printf(\"\\\n\");return 0;}\n" > _testm.c
$CC $CFLAGS _testm.c -o _testm 2> /dev/null
if [ ! -x _testm ]; then
	printf "\nWARNING! COULD NOT COMPILE ppc define TEST"
	printf " PROGRAM AT ALL!\n"
else
	if [ z`./_testm` = z1 ]; then
		printf "yes, workaround applied\n"
		echo "#undef ppc" >> config.h
	else
		if [ z`./_testm` = z12 ]; then
			printf "yes, but workaround not possible\n"
			exit
		else
			printf "no\n"
		fi
	fi
fi
rm -f _testm*


#  Similar to the mips define check above, although I don't know if
#  any OS actually defined sparc like this.
printf "checking for 'sparc' define... "
printf "#include <stdio.h>\nint main(int argc, char *argv[]){
#ifdef sparc
printf(\"1\");
#undef sparc
#ifdef sparc
printf(\"2\");
#endif
#endif
printf(\"\\\n\");return 0;}\n" > _testm.c
$CC $CFLAGS _testm.c -o _testm 2> /dev/null
if [ ! -x _testm ]; then
	printf "\nWARNING! COULD NOT COMPILE sparc define TEST "
	printf "PROGRAM AT ALL!\n"
else
	if [ z`./_testm` = z1 ]; then
		printf "yes, workaround applied\n"
		echo "#undef sparc" >> config.h
	else
		if [ z`./_testm` = z12 ]; then
			printf "yes, but workaround not possible\n"
			exit
		else
			printf "no\n"
		fi
	fi
fi
rm -f _testm*


#  CWARNINGS:
printf "checking whether -Wall can be used... "
$CC $CFLAGS _testprog.c -o _testprog -Wall 2> /dev/null
if [ -x _testprog ]; then
	printf "yes\n"
	CWARNINGS="-Wall $CWARNINGS"

	#  Compaq's compiler always seems to warn about the long long type,
	#  and unusedtop suppresses warnings about include files being
	#  included more than once.
	if [ z"$COMPAQCC" = zYES ]; then
		CWARNINGS="$CWARNINGS -msg_disable longlongtype,unusedtop"
	fi

	if [ z"$UNSTABLE" = zYES ]; then
		printf "checking whether -Werror can be used... "
		rm -f _testprog
		$CC $CFLAGS $CWARNINGS _testprog.c -o _testprog -Werror 2> /dev/null
		if [ -x _testprog ]; then
			printf "yes\n"
			CWARNINGS="$CWARNINGS -Werror"
		else
			printf "no\n"
		fi
	fi
else
	printf "no\n"
fi
rm -f _testprog


if [ z"$UNSTABLE" = zYES ]; then
	printf "checking whether -ansi can be used... "
	$CXX $CFLAGS $CWARNINGS -ansi _testprog.cc -o _testprog 2> /dev/null
	if [ -x _testprog ]; then
		printf "yes\n"
		CWARNINGS="$CWARNINGS -ansi"
	else
		printf "no\n"
	fi
	rm -f _testprog
fi


if [ z"$UNSTABLE" = zYES ]; then
	printf "checking whether -pedantic can be used... "
	$CXX $CFLAGS $CWARNINGS -pedantic _testprog.cc -o _testprog 2> /dev/null
	if [ -x _testprog ]; then
		printf "yes\n"
		CPEDANTIC="-pedantic"
	else
		printf "no\n"
	fi
	rm -f _testprog
fi


#  -Wstrict-aliasing
if [ ! z"$DEBUG" = zYES ]; then
	printf "checking whether -Wstrict-aliasing can be used... "
	$CXX $CFLAGS -Wstrict-aliasing _testprog.cc -o \
	    _testprog 1> _testprog.stdout 2>&1
	cat _testprog.stdout >> _testprog.error
	if grep frame _testprog.error > /dev/null 2>&1; then
		printf "no\n"
	else
		if [ -x _testprog ]; then
			CWARNINGS="-Wstrict-aliasing $CWARNINGS"
			printf "yes\n"
		else
			printf "no\n"
		fi
	fi
	rm -f _testprog _testprog.error _testprog.stdout
fi


if [ z"$COMPAQCC" = zYES ]; then
	#  -O4 is possible, but sometimes -O3 is better?
	if [ ! z"$DEBUG" = zYES ]; then
		CFLAGS="-O4 $CFLAGS"
	fi
else
	if [ z"`uname`" = zSunOS ]; then
		#  "cc", the system's default compiler:
		if [ ! z"$DEBUG" = zYES ]; then
			if [ z"$SUNCC" = zYES ]; then
				CFLAGS="-xO5 -xdepend $CFLAGS"
			fi
		fi
		printf "#define SOLARIS\n" >> config.h
		OTHERLIBS="-lsocket $OTHERLIBS"
	else
		#  gcc or something else:
		if [ ! z"$DEBUG" = zYES ]; then
			$CC $CFLAGS _testprog.c -o _testprog -O 2> /dev/null
			if [ -x _testprog ]; then
				rm -f _testprog
				$CC $CFLAGS _testprog.c -o _testprog	\
					-O3 2> /dev/null
				if [ -x _testprog ]; then
					CFLAGS="-O3 $CFLAGS"
				else
					CFLAGS="-O $CFLAGS"
				fi
			fi
		fi
	fi
fi
rm -f _testprog


#  -fschedule-insns
if [ ! z"$DEBUG" = zYES ]; then
    if [ z"$COMPAQCC" = zYES ]; then
	printf "checking whether -fschedule-insns2 can be used... "
	$CXX $CFLAGS _testprog.cc -o _testprog -fschedule-insns2 2> /dev/null
	if [ -x _testprog ]; then
		CFLAGS="-fschedule-insns2 $CFLAGS"
		printf "yes\n"
	else
		printf "no\n"
	fi
	rm -f _testprog

	printf "checking whether -fschedule-insns can be used... "
	$CXX $CFLAGS _testprog.cc -o _testprog -fschedule-insns 2> /dev/null
	if [ -x _testprog ]; then
		CFLAGS="-fschedule-insns $CFLAGS"
		printf "yes\n"
	else
		printf "no\n"
	fi
	rm -f _testprog

	#  -intrinsics
	printf "checking whether -intrinsics can be used... "
	$CXX $CFLAGS _testprog.cc -o _testprog -intrinsics 2> /dev/null
	if [ -x _testprog ]; then
		CFLAGS="-intrinsics $CFLAGS"
		printf "yes\n"
	else
		printf "no\n"
	fi
	rm -f _testprog

	#  -fast
	printf "checking whether -fast can be used... "
	$CXX $CFLAGS _testprog.cc -o _testprog -fast 2> /dev/null
	if [ -x _testprog ]; then
		CFLAGS="-fast $CFLAGS"
		printf "yes\n"
	else
		printf "no\n"
	fi
	rm -f _testprog
fi; fi


#  -fpeephole
if [ ! z"$DEBUG" = zYES ]; then
	printf "checking whether -fpeephole can be used... "
	$CXX $CFLAGS -fpeephole _testprog.cc -o _testprog > _testprog.stdout 2>&1
	cat _testprog.stdout >> _testprog.error
	if grep peephole _testprog.error > /dev/null 2>&1; then
		printf "no\n"
	else
		if [ -x _testprog ]; then
			CFLAGS="-fpeephole $CFLAGS"
			printf "yes\n"
		else
			printf "no\n"
		fi
	fi
	rm -f _testprog _testprog.error _testprog.stdout
fi


#  -fomit-frame-pointer
if [ ! z"$DEBUG" = zYES ]; then
	printf "checking whether -fomit-frame-pointer can be used... "
	$CXX $CFLAGS -fomit-frame-pointer _testprog.cc -o \
	    _testprog 1> _testprog.stdout 2>&1
	cat _testprog.stdout >> _testprog.error
	if grep frame _testprog.error > /dev/null 2>&1; then
		printf "no\n"
	else
		if [ -x _testprog ]; then
			CFLAGS="-fomit-frame-pointer $CFLAGS"
			printf "yes\n"
		else
			printf "no\n"
		fi
	fi
	rm -f _testprog _testprog.error _testprog.stdout
fi


#  -fstrict-aliasing
if [ ! z"$DEBUG" = zYES ]; then
	printf "checking whether -fstrict-aliasing can be used... "
	$CXX $CFLAGS -fstrict-aliasing _testprog.cc -o \
	    _testprog 1> _testprog.stdout 2>&1
	cat _testprog.stdout >> _testprog.error
	if grep frame _testprog.error > /dev/null 2>&1; then
		printf "no\n"
	else
		if [ -x _testprog ]; then
			CFLAGS="-fstrict-aliasing $CFLAGS"
			printf "yes\n"
		else
			printf "no\n"
		fi
	fi
	rm -f _testprog _testprog.error _testprog.stdout
fi


printf "checking whether -g can be used... "
if [ z"$COMPAQCC" = zYES ]; then
	$CC $CFLAGS -g3 _testprog.c -o _testprog > _testprog.stdout 2>&1
	cat _testprog.stdout >> _testprog.error
	if [ -x _testprog ]; then
		CFLAGS="-g3 $CFLAGS"
		printf "yes (-g3)\n"
	else
		printf "no\n"
	fi
else
	$CC $CFLAGS -g _testprog.c -o _testprog > _testprog.stdout 2>&1
	cat _testprog.stdout >> _testprog.error
	if [ -x _testprog ]; then
		CFLAGS="-g $CFLAGS"
		printf "yes\n"
	else
		printf "no\n"
	fi
fi
rm -f _testprog _testprog.error _testprog.stdout


#  -lrt for nanosleep?
printf "checking whether -lrt is required for nanosleep... "
printf "#include <time.h>\n#include <stdio.h>
int main(int argc, char *argv[]){nanosleep(NULL,NULL);return 0;}\n" > _testns.c
$CC $CFLAGS _testns.c -o _testns 2> /dev/null
if [ ! -x _testns ]; then
	$CC $CFLAGS -lrt _testns.c -o _testns 2> /dev/null
	if [ ! -x _testns ]; then
		printf "WARNING! COULD NOT COMPILE WITH nanosleep AT ALL!\n"
	else
		#  -lrt for nanosleep
		OTHERLIBS="-lrt $OTHERLIBS"
		printf "yes\n"
	fi
else
	printf "no\n"
fi
rm -f _testns.c _testns


#  -lresolv for inet_pton?
printf "checking whether -lresolv is required for inet_pton... "
printf "int inet_pton(void); int main(int argc, " > _testr.c
printf "char *argv[]) { return inet_pton(); }\n" >> _testr.c
$CC $CFLAGS _testr.c -o _testr 2> /dev/null
if [ ! -x _testr ]; then
	$CC $CFLAGS _testr.c -lresolv -o _testr 2> /dev/null
	if [ ! -x _testr ]; then
		$CC $CFLAGS _testr.c -lresolv -lnsl -o _testr 2> /dev/null
		if [ ! -x _testr ]; then
			printf "no, using inet_aton\n"
		else
			#  -lresolv -lnsl for inet_pton
			OTHERLIBS="-lresolv -lnsl $OTHERLIBS"
			printf "yes (and -lnsl)\n"
			printf "#define HAVE_INET_PTON\n" >> config.h
		fi
	else
		#  -lresolv for inet_pton
		OTHERLIBS="-lresolv $OTHERLIBS"
		printf "yes\n"
		printf "#define HAVE_INET_PTON\n" >> config.h
	fi
else
	printf "no\n"
	printf "#define HAVE_INET_PTON\n" >> config.h
fi
rm -f _testr.[co] _testr


#  -lm?
printf "checking for math libs..."
printf "#include <math.h>\nint main(int argc, char *argv[]) { " > _testr.c
printf "double x = sqrt(sin((double)argc)); return (int)x; }\n" >> _testr.c
$CC $CFLAGS _testr.c -o _testr 2> /dev/null
if [ ! -x _testr ]; then
	$CC $CFLAGS _testr.c -lm -o _testr 2> /dev/null
	if [ ! -x _testr ]; then
		$CC $CFLAGS _testr.c -lm -lcpml -o _testr 2> /dev/null
		if [ ! -x _testr ]; then
			printf "\nWARNING! Could not compile math test "
			printf "at all!\nContinuing anyway.\n\n"
		else
			#  -lm AND -lcpml
			OTHERLIBS="-lm -lcpml $OTHERLIBS"
			printf " -lm -lcpml\n"
		fi
	else
		#  Normal -lm
		OTHERLIBS="-lm $OTHERLIBS"
		printf " -lm\n"
	fi
else
	printf " none needed\n"
fi
rm -f _testr.[co] _testr


#  mkstemp missing?
printf "checking for mkstemp... "
printf "#include <unistd.h>
int main(int argc, char *argv[]) { int x; char *y = \"abc\";
x = mkstemp(y); return 0;}\n" > _tests.c
$CC $CFLAGS _tests.c -o _tests 2> /dev/null
if [ ! -x _tests ]; then
	printf "missing, using workaround\n"
	printf "#define mkstemp mymkstemp\n" >> config.h
else
	printf "found\n"
fi
rm -f _tests.[co] _tests


#  fseeko missing?
printf "checking for fseeko... "
printf "#include <stdlib.h>
#include <limits.h>
#include <stdio.h>
#include <sys/types.h>
int main(int argc, char *argv[]) { fseeko(NULL, 0, 0); return 0;}\n" > _tests.c
$CC $CFLAGS $CWARNINGS _tests.c -o _tests 2> /dev/null
if [ ! -x _tests ]; then
	# Try with _LARGEFILE_SOURCE (hack to make fseeko
	# work on 64-bit Linux):
	$CC $CFLAGS -D_LARGEFILE_SOURCE $CWARNINGS _tests.c -o _tests 2> /dev/null
	if [ ! -x _tests ]; then
		printf "missing\n"
		printf "WARNING! fseeko missing from libc. Using a hack, "
		printf "which probably doesn't work.\n"
		printf "#define HACK_FSEEKO\n" >> config.h
	else
		printf "using -D_LARGEFILE_SOURCE hack\n"
		CFLAGS="$CFLAGS -D_LARGEFILE_SOURCE"
	fi
else
	printf "found\n"
fi
rm -f _tests.[co] _tests


#  socklen_t missing?
#  (for example really old OpenBSD/arc 2.3, inside the emulator)
printf "checking for socklen_t... "
printf "#include <stdlib.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
int main(int argc, char *argv[]) { socklen_t x; return 0;}\n" > _tests.c
$CC $CFLAGS _tests.c -o _tests 2> /dev/null
if [ ! -x _tests ]; then
	printf "no, using int\n"
	CFLAGS="$CFLAGS -Dsocklen_t=int"
else
	printf "socklen_t\n"
fi
rm -f _tests.[co] _tests


#  MAP_ANON missing? (On some HP-UX systems? Use MAP_ANONYMOUS instead.)
printf "checking for MAP_ANON... "
rm -f _tests
printf "#include <stdio.h>
#include <sys/types.h>
#include <sys/mman.h>
int main(int argc, char *argv[]) { int x = MAP_ANON; return x*0;}\n" > _tests.cc
$CXX $CFLAGS _tests.cc -o _tests 2> /dev/null
if [ ! -x _tests ]; then
	printf "#include <stdio.h>
#include <sys/types.h>
#include <sys/mman.h>
int main(int argc, char *argv[])
{ int x = MAP_ANONYMOUS; return x*0;}\n" > _tests.cc
	$CXX $CFLAGS _tests.cc -o _tests 2> /dev/null
	if [ ! -x _tests ]; then
		printf "no\n\n"
		printf "WARNING! Neither MAP_ANON nor MAP_ANONYMOUS work on "
		printf "this system.\nPlease try to compile anyway, and report"
		printf " to me whether it builds/runs or not.\n\n"
		printf "#define MAP_ANON 0\n" >> config.h
		printf "#define NO_MAP_ANON\n" >> config.h
	else
		printf "using MAP_ANONYMOUS\n"
		printf "#define MAP_ANON MAP_ANONYMOUS\n" >> config.h
	fi
else
	printf "yes\n"
fi
rm -f _tests*


#  Check for PRIx64 in inttypes.h:
printf "checking for PRIx64 in inttypes.h... "
printf "#include <inttypes.h>\nint main(int argc, char *argv[])\n
{\n#ifdef PRIx64\nreturn 0;\n#else\nreturn 1;\n#endif\n}\n" > _testpri.c
$CC $CFLAGS _testpri.c -o _testpri 2> /dev/null
if [ ! -x _testpri ]; then
	printf "\nERROR! COULD NOT COMPILE PRIx64 TEST PROGRAM AT ALL!\n"
	exit
else
	if ./_testpri; then
		printf "yes\n"
	else
		printf "no, using an ugly hack instead, "
		printf "#define NO_C99_PRINTF_DEFINES\n" >> config.h

		# Try llx first:
		printf "#include <stdio.h>\n#include <inttypes.h>\nint main(int argc, char *argv[]){
		    printf(\"%%llx\\\n\", (int64_t)128);return 0;}\n" > _testpri.c
		rm -f _testpri
		$CC $CFLAGS $CWARNINGS _testpri.c -o _testpri 2> /dev/null
		if [ z`./_testpri` = z80 ]; then
			printf "PRIx64=llx\n"
			printf "#define NO_C99_64BIT_LONGLONG\n" >> config.h
		else
			# Try lx too:
			printf "#include <stdio.h>\n#include <inttypes.h>\nint main(int argc, char *argv[]){
			    printf(\"%%lx\\\n\", (int64_t)128);return 0;}\n" > _testpri.c
			rm -f _testpri
			$CC $CFLAGS $CWARNINGS _testpri.c -o _testpri 2> _testpri.result
			if [ z`./_testpri` = z80 ]; then
				printf "PRIx64=lx\n"
			else
				printf "\nFailed, neither lx nor llx worked!\n"
				exit
			fi
		fi
	fi
fi
rm -f _testpri.c _testpri _testpri.result


#  Check for 64-bit off_t:
printf "checking for 64-bit off_t... "
printf "#include <stdio.h>\n#include <inttypes.h>\n#include <sys/types.h>\n
int main(int argc, char *argv[]){printf(\"%%i\\\n\",
 (int)sizeof(off_t));return 0;}\n" > _testoff.c
$CC $CFLAGS _testoff.c -o _testoff 2> /dev/null
if [ ! -x _testoff ]; then
	printf "\nWARNING! COULD NOT COMPILE off_t TEST PROGRAM AT ALL!\n"
else
	if [ z`./_testoff` = z8 ]; then
		printf "yes\n"
	else
		$CC $CFLAGS -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE \
		    _testoff.c -o _testoff 2> /dev/null
		if [ ! -x _testoff ]; then
			printf "\nWARNING! COULD NOT COMPILE off_t TEST "
			printf "PROGRAM!\n"
		else
			if [ z`./_testoff` = z8 ]; then
				CFLAGS="-D_FILE_OFFSET_BITS=64 $CFLAGS"
				CFLAGS="-D_LARGEFILE_SOURCE $CFLAGS"
				printf "using -D_FILE_OFFSET_BITS=64"
				printf " -D_LARGEFILE_SOURCE\n"
			else
				printf "NO\n"
				printf "Warning! No 64-bit off_t. Continuing "
				printf "anyway.\n"
			fi
		fi
	fi
fi
rm -f _testoff.c _testoff


#  Check for u_int8_t etc:
#  These are needed because some header files in src/include/ use u_int*
#  instead of uint*, and I don't have time to rewrite them all.
printf "checking for u_int8_t... "
printf "#include <stdio.h>\n#include <inttypes.h>\n#include <sys/types.h>\n
int main(int argc, char *argv[]){printf(\"%%i\\\n\",
 (int)sizeof(u_int8_t));return 0;}\n" > _testuint.c
$CC $CFLAGS _testuint.c -o _testuint 2> /dev/null
if [ ! -x _testuint ]; then
	rm -f _testuint*
	printf "#include <stdio.h>\n#include <inttypes.h>
	\n#include <sys/types.h>\nint main(int argc, char *argv[])
	{printf(\"%%i\\\n\", (int)sizeof(uint8_t));return 0;}\n" > _testuint.c
	$CC $CFLAGS _testuint.c -o _testuint 2> /dev/null
	if [ ! -x _testuint ]; then
		printf "no\n\nERROR: No u_int8_t or uint8_t. Aborting\n"
		#  TODO: Automagically detect using various combinations
		#  of char, int, short, long etc.
		exit
	fi

	printf "typedef uint8_t u_int8_t;\n" >> config.h
	printf "typedef uint16_t u_int16_t;\n" >> config.h
	printf "typedef uint32_t u_int32_t;\n" >> config.h
	printf "uint8_t\n"
else
	printf "yes\n"
fi
rm -f _testuint.c _testuint

printf "checking for u_int64_t... "
printf "#include <stdio.h>\n#include <inttypes.h>\n#include <sys/types.h>\n
int main(int argc, char *argv[]){printf(\"%%i\\\n\",
 (int)sizeof(u_int64_t));return 0;}\n" > _testuint.c
$CC $CFLAGS _testuint.c -o _testuint 2> /dev/null
if [ ! -x _testuint ]; then
	rm -f _testuint*
	printf "#include <stdio.h>\n#include <inttypes.h>
	\n#include <sys/types.h>\nint main(int argc, char *argv[])
	{printf(\"%%i\\\n\", (int)sizeof(uint64_t));return 0;}\n" > _testuint.c
	$CC $CFLAGS _testuint.c -o _testuint 2> /dev/null
	if [ ! -x _testuint ]; then
		printf "no\n\nERROR: No u_int64_t or uint64_t. Aborting\n"
		#  TODO: Automagically detect using various combinations
		#  of char, int, short, long etc.
		exit
	fi

	printf "typedef uint64_t u_int64_t;\n" >> config.h
	printf "uint64_t\n"
else
	printf "yes\n"
fi
rm -f _testuint*

printf "checking for __FUNCTION__... "
printf "#include <stdio.h>\n\nint main(int argc, char *argv[]) {
  if (__FUNCTION__) printf(__FUNCTION__);\n  return 0;\n}\n" > _testfunction.c
$CC $CFLAGS _testfunction.c -o _testfunction 2> /dev/null
if [ ! -x _testfunction ]; then
	printf "no\n"
else
	if [ z`./_testfunction` = zmain ]; then
		printf "yes\n"
		printf "#define HAVE___FUNCTION__\n" >> config.h
	else
		printf "no\n"
	fi
fi
rm -f _testfunction*


###############################################################################

#  Host byte order?
printf "checking host endianness... "
rm -f _test_end*
printf '#include <stdio.h>
int main(int argc, char *argv[])
{  int x = 1; void *xp = (void *)&x; char *p = (char *)xp;
if (*p) printf("little\\\n"); else printf("big\\\n"); }
' > _test_end.c
$CC $CFLAGS _test_end.c -o _test_end 2> /dev/null
X=`./_test_end`
echo $X
if [ z$X = zlittle ]; then
	printf "#define HOST_LITTLE_ENDIAN\n" >> config.h
else
	if [ z$X = zbig ]; then
		printf "#define HOST_BIG_ENDIAN\n" >> config.h
	else
		echo "Error! Could not determine host's endianness."
		exit
	fi
fi
rm -f _test_end*


###############################################################################

printf "detecting native code generation ABI... "

if [ z$DISABLENATIVECODE = zYES ]; then
	echo "skipping"
else
	if [ z"`uname -m`" = zamd64 ]; then
		NATIVE_CODE_GENERATION=YES
		printf "amd64\n"
		printf "#define NATIVE_CODE_GENERATION\n" >> config.h
		printf "#define NATIVE_ABI_AMD64\n" >> config.h
	fi

	if [ z"`uname -m`" = zx86_64 ]; then
		NATIVE_CODE_GENERATION=YES
		printf "amd64\n"
		printf "#define NATIVE_CODE_GENERATION\n" >> config.h
		printf "#define NATIVE_ABI_AMD64\n" >> config.h
	fi

	if [ z$NATIVE_CODE_GENERATION = z ]; then
		printf "sorry, not implemented for "`uname -m`" yet\n"
	fi
fi


###############################################################################

printf "checking for Doxygen... "

if (doxygen --version > /dev/null); then
	echo found
	DOXYGEN=doxygen
else
	# Not found is already printed, if doxygen is not found.
	DOXYGEN="\#"
fi


###############################################################################

GTKMM_VER="2.12.5"
printf "checking for gtkmm-2.4 >= $GTKMM_VER... "

if [ z$WITHOUTGTKMM = zYES ]; then
	echo skipping
else
	if pkg-config --atleast-version=$GTKMM_VER gtkmm-2.4; then
		echo found
		CFLAGS="$CFLAGS `pkg-config --cflags gtkmm-2.4`"
		OTHERLIBS="$OTHERLIBS `pkg-config --libs gtkmm-2.4`"
		CFLAGS="$CFLAGS -DWITH_GTKMM"
	else
		echo not found
		if [ z$WITHGTKMM = zYES ]; then
			echo "Sorry, gtkmm-2.4 version $GTKMM_VER or newer" \
			    "was not found. Aborting."
			exit
		fi
	fi
fi


###############################################################################

if [ "z$PREFIX" = z ]; then
	PREFIX="$DEFAULTPREFIX"
fi	
echo "checking for 'make install' prefix (\$PREFIX): $PREFIX"


###############################################################################

INCLUDE1="-I../include/"
INCLUDE2="-I../../include"

rm -f _testprog*

echo C/C++ compiler flags: $CFLAGS $CWARNINGS $CPEDANTIC
echo Linker flags: $OTHERLIBS

echo "CWARNINGS=$CWARNINGS" >> _Makefile.header
echo "COPTIM=$CFLAGS" >> _Makefile.header
echo "CPEDANTIC=$CPEDANTIC" >> _Makefile.header
echo "INCLUDE1=$INCLUDE1" >> _Makefile.header
echo "INCLUDE2=$INCLUDE2" >> _Makefile.header
echo "PREFIX=$PREFIX" >> _Makefile.header
echo "CC=$CC" >> _Makefile.header
echo "CXX=$CXX" >> _Makefile.header
echo "OTHERLIBS=$OTHERLIBS" >> _Makefile.header
echo "DOXYGEN=$DOXYGEN" >> _Makefile.header
echo "" >> _Makefile.header

#  Create list of unit testable classes:
rm -f unittest.h unittest_h.h
printf "// DO NOT EDIT. Automagically generated by the configure script.\n" >> unittest.h
printf "// DO NOT EDIT. Automagically generated by the configure script.\n" >> unittest_h.h
printf "// Will be removed by  make clean_all\n\n" >> unittest.h
printf "// Will be removed by  make clean_all\n\n" >> unittest_h.h
for a in `find src -name "*.cc" -print`; do grep UNITTESTS\( "$a";
	done | cut -d \( -f 2|cut -d \) -f 1 > _unittests.tmp
for a in `cat _unittests.tmp`; do
	cd src/include
	HNAME=`find . -name $a.h | cut -c 3-`
	cd ../..
	printf "#include \"$HNAME\"\n" >> unittest_h.h
	printf "\t$a::RunUnitTests(nSucceeded, nFailed);\n" >> unittest.h
done
rm -f _unittests.tmp

#  Create a list of Commands:
rm -f commands_h.h commands.h
printf "// DO NOT EDIT. Automagically generated by the configure script.\n" >> commands.h
printf "// DO NOT EDIT. Automagically generated by the configure script.\n" >> commands_h.h
printf "// Will be removed by  make clean_all\n\n" >> commands.h
printf "// Will be removed by  make clean_all\n\n" >> commands_h.h
for a in src/main/commands/*.cc; do echo $a|cut -d / -f 4-; done > _commands.tmp
for a in `cat _commands.tmp`; do
	CNAME=`echo $a|cut -d . -f 1`
	printf "#include \"commands/$CNAME.h\"\n" >> commands_h.h
	printf "\tAddCommand(new $CNAME);\n" >> commands.h
done
rm -f _commands.tmp

#  Create a list of Components:
rm -f components.h components_h.h
printf "// DO NOT EDIT. Automagically generated by the configure script.\n" >> components.h
printf "// DO NOT EDIT. Automagically generated by the configure script.\n" >> components_h.h
printf "// Will be removed by  make clean_all\n\n" >> components.h
printf "// Will be removed by  make clean_all\n\n" >> components_h.h
grep COMPONENT\( src/include/components/*.h|cut -d \( -f 2|cut -d \) -f 1 > _components.tmp
cd src/include/components
for a in `cat ../../../_components.tmp`; do
	CNAME=`grep COMPONENT\($a\) *.h|cut -d . -f 1`
	printf "#include \"components/$CNAME.h\"\n" >> ../../../components_h.h
	printf "\t{ \"$a\", $CNAME::Create, $CNAME::GetAttribute },\n" >> ../../../components.h
done
cd ../../..
rm -f _components.tmp

#  Create the Makefiles:
D=". src src/components"
D="$D src/components/busses src/components/cpu src/components/dummy"
D="$D src/components/machines src/components/memory"
D="$D src/ir"
D="$D src/main src/main/actions src/main/commands"
D="$D src/ui src/ui/console src/ui/gtkmm src/ui/nullui"
for a in $D; do
	echo "creating $a/Makefile"
	touch $a/Makefile
	cat _Makefile.header > $a/Makefile
	cat $a/Makefile.skel >> $a/Makefile
done

#  Tail of config.h:
printf "\n#endif  /*  CONFIG_H  */\n" >> config.h

#  Remove temporary Makefile header:
rm -f _Makefile.header


echo Configured. You may now run make to build gxemul.

